initSidebarItems({"mod":[["actors","Helper actors"],["fut","Custom `Future` implementation with `Actix` support"],["msgs","Actix system messages"]],"struct":[["ActorResponse","Helper type for representing different type of message responses"],["Arbiter","Event loop controller"],["ContextFut",""],["ContextParts",""],["Envelope",""],["Mailbox",""],["Recipient","`Recipient` type allows to send one specific message to an actor."],["RecipientRequest","`RecipientRequest` is a `Future` which represents asynchronous message sending process."],["Registry","Actors registry"],["Request","`Request` is a `Future` which represents asynchronous message sending process."],["Response","Helper type for representing different type of message responses"],["SpawnHandle","Spawned future handle. Could be used for cancelling spawned future."],["SyncContext","Sync actor execution context"],["System","System is an actor which manages runtime."],["SystemRegistry","System wide actors registry"]],"trait":[["ActorContext","Actor execution context"],["ActorFuture","Trait for types which are a placeholder of a value that may become available at some later point in time."],["ActorStream","A stream of values, not all of which may have been produced yet."],["ArbiterService","Trait defines arbiter's service."],["AsyncContext","Asynchronous execution context"],["AsyncContextParts",""],["Handler","Message handler"],["Message","Message type"],["MessageResponse","Trait which defines message response"],["ResponseChannel","Trait defines message response channel"],["StreamHandler","Stream handler"],["ToEnvelope","Converter trait, packs message to suitable envelope"],["WrapStream","Helper trait that allows conversion of normal stream into `ActorStream`"]],"type":[["ResponseFuture","A specialized future for async message handler"]]});